##################################################
# Frank Perbet - 2002/04/14                      #
# object: unix stuff                             #
##################################################




# to suppress the error output of shell command...
# $1 (the first and only argument) is the unix command shell to be executed
# the macro must return the output of the command.
# the purpose of this macro is too suppress the error output.
# this is easily done is bash by redirecting the error output in /dev/null
define mk_shell_command
{
	if (($MK_ENV_VAR["SHELL"]=="/bin/bash") || ($MK_ENV_VAR["SHELL"]=="/bin/zsh") || ($MK_ENV_VAR["SHELL"]=="/bin/ksh"))
	{
		res = shell_command($1 " 2> " $mk_tmp_file,"")
		$mk_shell_error=read_file($mk_tmp_file)
		if(length(res)==0)
		{
			# to be sure that there is at least an newline (convetion)
			return res "\n"
		}
		else
		{
			return res
		}
	}
	else if (($MK_ENV_VAR["SHELL"]=="/bin/tcsh") || ($MK_ENV_VAR["SHELL"]=="/bin/csh") || ($MK_ENV_VAR["SHELL"]=="/bin/sh"))
	{
		redir=" >! "
		if($MK_ENV_VAR["SHELL"]=="/bin/sh") redir=" > "
    	cmd = "\\rm "$mk_tmp_file" ; "$1 redir $mk_tmp_file
		$mk_shell_error=shell_command(cmd,"")
		res=read_file($mk_tmp_file)
		if(length(res)==0)
		{
			# to be sure that there is at least an newline (convetion)
			return res "\n"
		}
		else
		{
			return res
		}
	}
	# no check here
	else
	{
		return shell_command($1,"")
	}
}

define mk_no_return_shell_command
{
	if (($MK_ENV_VAR["SHELL"]=="/bin/tcsh") || ($MK_ENV_VAR["SHELL"]=="/bin/csh"))
	{
		shell_command($1 " >& /dev/null &","")
		return
	}
	else
	{
		dialog("mk_no_return_shell_command: wrong shell")
		return
	}
}

# basename function -> supress the directory part
define mk_extract_filename
{
	n=search_string($1,"/",length($1)-1,"literal","backward")
	if(n==-1)
	{
		return $1
	}
	else
	{
		return substring($1,n+1,length($1))
	}
}

# basename function -> supress the directory part
define mk_extract_pathname
{
	n=search_string($1,"/",length($1)-1,"literal","backward")
	if(n==-1)
	{
		return "./"
	}
	else
	{
		return substring($1,0,n+1)
	}
}


# ex: mk_extract_extension(toto.txt) -> txt ("" if there is no extension)
# ex: mk_extract_extension(toto.txt,gz) -> gz ("" if there is no extension)
define mk_extract_extension
{
	filename = $1
	position_point = search_string(filename , "\\." , length(filename) , "regex" , "backward")
	if (position_point==-1) return ""
	return substring(filename,position_point+1,length(filename))
}

# ex: mk_extract_basename(toto.txt) -> toto (the whole name if there is no extension)
define mk_extract_basename
{
	filename = $1
	position_point = search_string(filename , "." , length(filename) , "case", "backward")
	position_slash = search_string(filename , "/" , length(filename) , "case", "backward")
	if ((position_point!=-1) && (position_point>position_slash))
		filename=substring(filename,0,position_point)
		
	position_slash = search_string(filename , "/" , length(filename) , "case", "backward")
	if (position_slash!=-1)
		filename=substring(filename,position_slash+1,length(filename))
	
	return filename
}

# check if $1 is a file
define mk_test_file_or_path
{
	if($1=="") return ""
	tmp=shell_command($mk_uc["test"] " -e " mk_ssc($1), "")
	if($shell_cmd_status == 0)
	{
		return $1
	}
	else
	{
		return ""
	}
}

# check if $1 is a file
define mk_test_file
{
	if($1=="") return ""
	tmp=shell_command($mk_uc["test"] " -f " mk_ssc($1), "")
	if($shell_cmd_status == 0)
	{
		return $1
	}
	else
	{
		return ""
	}
}

# check if $1 is a directory
define mk_test_path
{
	shell_command($mk_uc["test"] " -d " mk_ssc($1), "")
	if($shell_cmd_status == 0)
	{
		return $1
	}
	else
	{
		return ""
	}
}

# check if $1 is a valid host
define mk_test_host
{
	cmd=$mk_uc["rsh"] " " $1 " echo"
	shell_command(cmd,"")
	if($shell_cmd_status==0)
	{
		return $1
	}
	else
	{
		return ""
	}
}

# search file $1 in directory $3 in all the sub-directories $2.
define mk_search_file
{
	if ($n_args!=3)
	{
		dialog("mk_search_file(): Wrong number of arguments.")
		return
	}

	filename=mk_ssc($1)
	search_path=$2
	relative_directory=$3
	
	cmd = ""
	if(relative_directory != "")
	{
		cmd = "cd " mk_ssc(relative_directory) " ; "
	}
	subcmd = "if [ -f $i/" filename " ]; then echo $i/" filename " ; fi;"
	cmd = cmd "for i in " search_path " ; do ( " subcmd " ) ; done"
	cmd = "sh -c \'" cmd "\'"
	res=shell_command(cmd,"")
#	dialog(cmd "\n\n" res)
#	string_to_clipboard(cmd)

	first=substring(res,0,search_string(res,"\n",0,"regex"))
	if(first!="")
	{
		return mk_filename(first,relative_directory)
	}
	else
	{
		return ""
	}
}

# get the last directory name of a path name
define mk_last_dir_name
{
	n=search_string($1,"/",length($1)-2,"backward")
	if(n==-1) return
	basename = substring($1,n+1,length($1))
	basename_aux=replace_in_string(basename,"(.*?)(/*)","\\1","regex")
	if(basename_aux!="") basename = basename_aux
	return basename
}


# return the "purified" absoluted file name (possible relative path name in $2)
define mk_filename
{
	if ($n_args==2)
	{
		file_and_path_name=$1
		relative_directory=$2
	}
	else if ($n_args==1)
	{
		file_and_path_name=$1
		relative_directory=""
	}
	else
	{
		dialog("mk_filename(): Wrong number of arguments.")
		return
	}
	
	# empty file name
	if (file_and_path_name=="") return ""
	
	# look for /
	n=search_string(file_and_path_name,"/",length(file_and_path_name),"backward")
	
	# the file name seems to be a path name
	if(n==length(file_and_path_name)-1)
	{
		dialog("mk_filename(): " file_and_path_name " is a directory name.")
		return
	}
	
	# the file name is a single file name
	if (n==-1)
	{
		filename = file_and_path_name
		pathname = mk_pathname(relative_directory)
	}
	# the file name is has a path component
	else
	{
		pathname = mk_pathname(substring(file_and_path_name,0,n),relative_directory)
		filename = substring(file_and_path_name,n+1,length(file_and_path_name))
	}
	
	if((pathname!="") && (filename!=""))
		return pathname filename
	else
		return ""
}

# return the "purified" absoluted path name (possible relative path name in $2)
define mk_pathname
{
	if ($n_args==2)
	{
		pathname=$1 "/"
		relative_directory=$2
	}
	else if ($n_args==1)
	{
		pathname=$1 "/"
		relative_directory=""
	}
	else
	{
		dialog("unix.nm: mk_pathname: Wrong number of arguments.")
		return
	}
	
	if (pathname=="") return ""

	# If the path start with ~, remove the ~
	if (substring(pathname,0,1)=="~")
	{
		pathname=replace_substring(pathname,0,1,$MK_ENV_VAR["HOME"])
	}
	
	# If the relative path start with ~, remove the ~
	if(relative_directory!="")
	if (substring(relative_directory,0,1)=="~")
	{
		relative_directory=replace_substring(relative_directory,0,1,$MK_ENV_VAR["HOME"])
	}
	
	# If the path is not absolute, transform it
	if (substring(pathname,0,1)!="/")
	{
		if (relative_directory=="") return ""

		if (substring(relative_directory,0,1)!="/")
		{
			dialog("unix.nm: mk_pathname(\""pathname"\",\""relative_directory "\")\nERROR: second argument must be absolute.")
			return
		}
		
		pathname= relative_directory "/" pathname
	}

	# erase the "//"
	tmp=replace_in_string(pathname,"//+","/","regex")
	if (tmp!="") pathname=tmp
		
	# erase the /."
	tmp=replace_in_string(pathname,"/(?:\\./)+","/","regex")
	while( tmp != "" )
	{
		pathname=tmp
		tmp=replace_in_string(pathname,"/(?:\\./)+","/","regex")
	}
	
	# erase the "/.."
	tmp=replace_in_string(pathname,"/(?!\\.\\./)[^/]+/\\.\\./","/","regex")
	while( tmp != "" )
	{
		pathname=tmp
		tmp=replace_in_string(pathname,"/(?!\\.\\./)[^/]+/\\.\\./","/","regex")
	}
	
	return mk_last_slash(pathname)
}

define mk_last_slash
{
	l=length($1)
	if (substring($1,l-1,l)!="/")
	{
		return $1"/"
	}
	else
	{
		return $1
	}
}

# take care of unix special caracter
define mk_ssc
{
	tmp=replace_in_string($1,$mk_shell_special_char,"\\\\\\1","regex")
	if (tmp!="") return tmp
	else return $1
}


# return true if the curent file is a nedit buffer file
define mk_is_buffer_file
{
	if($MK_ENV_VAR["TMP_PATH"] != $file_path) return 0
	n1=search_string($file_name,$mk_buffer_name_begin,0)
	n2=search_string($file_name,$mk_engine_name_begin,0)
	return (n1==0) || (n2==0)
}

# return a non buffer document if it exist
define mk_nonBufferDoc
{
	docName=$file_path $file_name
	if(!mk_is_buffer_file(docName)) return docName
	docName=focus_window("last")
	while ((docName!="") && (mk_is_buffer_file(docName)))
	{
		docName=focus_window("next")
	}
	return docName
}

# open file $1 in the same window than $2
define mk_open_file_in_group
{
	if(focus_window($1)!="") return $1
	if($mk_output_param["tab"])
	{
		if($2=="")
		{
			new("window")
			focus_window("last")
		}
		else
		{
			focus_window($2)
		}
		return mk_open_file($1)
	}
	else
	{
		return mk_open_file($1)
	}
}

# test, open a file and focus
define mk_open_file
{
	if ($n_args==1)
	{
		filename=mk_filename($1)
	}
	else if ($n_args==2)
	{
		filename=mk_filename($1,$2)
	}
	else
	{
		dialog("mk_open_file: wrong number arguments")
		return
	}
	
	if(focus_window(filename)!="")
	{
		raise_window()
		return filename
	}
	
	filename=mk_test_file(filename)	

	# Perform the test
	if (filename != "")
	{
		if($mk_output_param["tab"])
		{
			nbd=mk_nonBufferDoc()
			if(focus_window(nbd)=="")
			{
				new("window")
				focus_window("last")
			}
		}
		open(filename)
		res=focus_window(filename)
		if(res!="")raise_window()
		return res
	}

	return ""
}

# search a file in the recursive directories
# $1 must be an absolute path
define mk_rec_find_file
{
	maxdepthNum=3
	if ($n_args==3)
	{
		maxdepthNum=$3
	}
	else if ($n_args!=2)
	{
		dialog("mk_search_file: Wrong number of arguments.")
		return ""
	}
	filename = mk_extract_filename($1)
	relative_directory=mk_pathname(mk_extract_pathname($1),$2)
	maxdepth = ""
	if($mk_uc_compatibility["maxdepth"]) maxdepth = "-maxdepth " maxdepthNum
	
	find_param=maxdepth " \\( \\( -type f -o -type d -o -type l \\) -a -name " mk_ssc(filename) " \\)"
	list_file_command="cd  " mk_ssc(relative_directory) " ; " $mk_uc["find"] " . " find_param
	list=mk_shell_command(list_file_command)
	
	if (search_string(list,"\\S",0,"regex")==-1) return ""

	if(search_string(list,"\n",0,"regex")==length(list)-1)
	{
		return mk_filename(substring(list,0,length(list)-1),relative_directory)
	}
	else
	{
		res=list_dialog("Choose a file:",list,"goto","dismiss")
		if ( ($list_dialog_button==1) && (res!="") )
		{
			return mk_filename(res,relative_directory)
		}
	}
	return ""
}


# general gotoline
define mk_goto_location
{
	n=search_string($1,"^[0-9]+$",0,"regex")
	if(n!=-1)
	{
		goto_line_number($1)
		return ($selection_start!=-1)
	}
	
	re="^(\\()([0-9]+)(,)([0-9]+)(\\))$"
	n=search_string($1,re,0,"regex")
	if(n!=-1)
	{
		beg=replace_in_string($1,re,"\\2","regex")
		end=replace_in_string($1,re,"\\4","regex")
		if($n_args>1)
		{
			beg+=$2
			end+=$2
		}
		set_cursor_pos(end)
		select(beg,end)
		return ($selection_start!=-1)
	}
	
	return 0
}



# check the $mk_uc stuff
define mk_check_uc
{
	str=""
	for (i in $mk_uc)
	{
		str=str "$mk_uc[\""i "\"] = " $mk_uc[i] "\n"
	}
	string_to_clipboard(str)
	str=str "\nThis message is now on your clipboard."
	dialog(str)
}


define mk_init_nc
{
	cmd = $mk_uc["nc"] " -version"
	res=shell_command(cmd,"")
	status=$shell_cmd_status
	
	if(status!=0)
	{
		mess="unix.nm: Error when executing command:\n" cmd
		mess=mess "\nCheck the value of $mk_uc[\"nc\"] in macro_parameters.nm"
		dialog(mess)
		return
	}
	
	re=".* Version ([0-9]+)\\.([0-9]+)"
	$mk_nc_version[0]=replace_in_string(res,re,"\\1","regex")
	$mk_nc_version[1]=replace_in_string(res,re,"\\2","regex")
	tmp=replace_in_string(res,re,"\\3","regex")
	if(tmp!="")
	{
		$mk_nc_version[2]=replace_in_string(res,re,"\\3","regex")
	}
	
	if(($mk_nc_version[0]=="") || ($mk_nc_version[1]==""))
	{
		mess="unix.nm: Warning: cannot find out nedit version (5.4 by default)."
		$mk_nc_version[0]=5
		$mk_nc_version[1]=4
		dialog(mess)
		return
	}
	
	if(!("tab" in $mk_output_param))
	{
		$mk_output_param["tab"]=0
		if(($mk_nc_version[0]>=5) && ($mk_nc_version[1]>=5))
		{
			$mk_output_param["tab"]=1
		}
	}
}


define mk_init_unix
{
	$mk_shell_error=""
	$mk_shell_special_char="([\t \\[\\]\"\\\\()<>$'`~{};*&?|!])"
	$mk_tmp_file=mk_filename("nedit_" $server_name "_" $MK_ENV_VAR["HOST"] "_" $MK_ENV_VAR["USER"] ".tmp",$MK_ENV_VAR["TMP_PATH"])
	
	$MK_ENV_VAR["TMP_PATH"]=mk_pathname($MK_ENV_VAR["TMP_PATH"])
	
	mk_init_nc()
}

mk_init_unix()
